#!/usr/bin/env python3
"""
Construct a binary gray matter mask from an individual subject Freesurfer recon
- uses aparc.a2099s+aseg.* indexed label image generated by FS in mri/ subdir

Authors
----
Mike Tyszka, Caltech Brain Imaging Center

MIT License

Copyright (c) 2019 Mike Tyszka

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"""

import sys
import argparse
import numpy as np
import nibabel as nb


def main():

    # Parse command line arguments
    parser = argparse.ArgumentParser(description='Construct a gray matter mask from Freesurfer aparc.a2009s+aseg image')
    parser.add_argument('-i', '--infile', required=True, help='Freesurfer aparc.a2009s+aseg image filename')
    parser.add_argument('-o', '--outfile', help='Output cortical and subcortical gray matter mask')

    # Parse command line arguments
    args = parser.parse_args()
    in_file = args.infile

    if args.outfile:
        out_file = args.outfile
    else:
        out_file = 'gm_mask.nii.gz'

    print('Loading aparc.a2009a+aseg image ({})'.format(in_file))
    try:
        aseg_nii = nb.load(in_file)
        aseg = aseg_nii.get_data()
    except:
        print('* Problem loading {} - exiting'.format(in_file))
        sys.exit(1)

    print('')
    print('Excluding non-gray matter labels')

    # Exclude WM, CSF labels
    # WM : 2, 6, 41, 46
    # CSF : 4, 5, 14, 15, 43, 44
    # Brainstem : 16

    excludes = [2, 7, 41, 46, 4, 5, 14, 15, 43, 44, 16]

    for lc in excludes:

        print('Exclude label {}'.format(lc))
        aseg[aseg == lc] = 0

    # Binarize mask
    gm_mask = (aseg > 0).astype(np.uint8)

    # Save GM mask
    print('')
    print('Saving GM mask to {}'.format(out_file))
    t1w_nii = nb.Nifti1Image(gm_mask, aseg_nii.affine)
    t1w_nii.to_filename(out_file)


# This is the standard boilerplate that calls the main() function.
if __name__ == '__main__':
    main()
